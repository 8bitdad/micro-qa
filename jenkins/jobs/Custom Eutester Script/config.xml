<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>&lt;strong&gt;Create your own Eutester script.&lt;/strong&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>repo_url</name>
          <description></description>
          <defaultValue>git://github.com/eucalyptus/eutester.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>branch</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>master</string>
              <string>testing</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>eucarc</name>
          <description>Text from eucarc file</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>script</name>
          <description></description>
          <defaultValue>#!/usr/bin/python

import time
from eucaops import Eucaops
from eutester.eutestcase import EutesterTestCase
import os

class InstanceBasics(EutesterTestCase):
    def __init__(self):
        #### Pre-conditions
        self.setuptestcase()
        self.setup_parser()
        self.get_args()
        # Setup basic eutester object
        self.tester = Eucaops( credpath=self.args.credpath)
        self.reservation = None
        ### Add and authorize a group for the instance
        ### Generate a keypair for the instance
        self.keypair_name = &quot;keypair-&quot; + str(time.time()).replace(&quot;.&quot;, &quot;&quot;) + self.tester.id_generator()
        self.keypair = self.tester.add_keypair(self.keypair_name)
        ### Get an image to work with
        self.image = self.tester.get_emi(root_device_type=&apos;instance-store&apos;)

    def clean_method(self):
        &quot;&quot;&quot;
        Description: Attempts to clean up resources created in this test
        &quot;&quot;&quot;
        self.tester.cleanup_artifacts()

    def MyTest(self):
        &quot;&quot;&quot;
        Description: This test will simply run an instance and check that it is reachable via ssh.
        &quot;&quot;&quot;
        self.reservation = self.tester.run_instance(self.image,zone=self.zone, keypair=self.keypair_name, timeout=600)
     
if __name__ == &quot;__main__&quot;:
    testcase = InstanceBasics()
    ### Use the list of tests passed from config/command line to determine what subset of tests to run
    ### or use a predefined list
    list = testcase.args.tests or [ &quot;MyTest&quot;]

    ### Convert test suite methods to EutesterUnitTest objects
    unit_list = [ ]
    for test in list:
        unit_list.append( testcase.create_testunit_by_name(test) )

    ### Run the EutesterUnitTest objects
    result = testcase.run_test_case_list(unit_list,clean_on_exit=True)
    exit(result)</defaultValue>
        </hudson.model.TextParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <quietPeriod>0</quietPeriod>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>CREDPATH=credentials
if [ ! -d &quot;$CREDPATH&quot; ]; then
    mkdir $CREDPATH
fi
cat &gt; credentials/eucarc &lt;&lt; EOF
$eucarc
EOF

cat &gt; test_script &lt;&lt; EOF
$script
EOF
/share/python_lib/stable/bin/python ./test_script --credpath credentials</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>